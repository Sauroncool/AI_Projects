class graph:
    Graph = { # Directly define the problem with its children and their separation. Separation beetween each node is
        # assumed uniform(can be changed).
        'A': [('B',10),('D',10),('E',10),('C',10)],
        'B': [('H1', 10), ('F', 10), ('D', 10), ('A', 10)],
        'C': [('A', 10), ('D', 10), ('E', 10), ('H7', 10)],
        'D': [('A', 10), ('B', 10), ('F', 10), ('G', 10), ('H', 10), ('E', 10), ('C', 10)],
        'E': [('C', 10), ('A', 10), ('D', 10), ('H', 10), ('H7', 10)],
        'F': [('B', 10), ('H1', 10), ('I', 10), ('L', 10), ('J', 10), ('D', 10)],
        'G': [('D', 10), ('J', 10), ('H', 10)],
        'H': [('E', 10), ('D', 10), ('G', 10), ('J', 10), ('K', 10), ('H6', 10), ('H7', 10)],
        'I': [('H1', 10), ('H2', 10), ('L', 10), ('J', 10), ('F', 10)],
        'J': [('F', 10), ('I', 10), ('L', 10), ('K', 10), ('H6', 10), ('H',10), ('G', 10)],
        'K': [('J', 10), ('L', 10), ('M', 10), ('H5', 10), ('H', 10)],
        'L': [('F', 10), ('I', 10), ('H2', 10), ('H3', 10), ('M', 10), ('K', 10), ('J', 10)],
        'M': [('L', 10), ('H3', 10), ('H4', 10), ('H5', 10), ('K', 10)],
        'H1': [('B', 10), ('F', 10), ('I', 10)],
        'H2': [('I', 10), ('L', 10), ('H3', 10)],
        'H3': [('H2', 10), ('L', 10), ('M', 10)],
        'H4': [('M', 10)],
        'H5': [('M', 10), ('K', 10), ('H6', 10)],
        'H6': [('H', 10), ('J', 10), ('H5', 10)],
        'H7': [('C', 10), ('E', 10), ('H', 10)]
        }

    no_fly = ['A', 'F', 'E', 'J', 'L']
    obstacle = ['B', 'C', 'G', 'K']
    forbidden_nodes = no_fly + obstacle